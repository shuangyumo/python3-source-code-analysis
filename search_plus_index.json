{"./":{"url":"./","title":"前言","keywords":"","body":"介绍 本项目致力于对 Python 3.7 的源码分析，深度参考陈儒大大的《Python 源码剖析》，编写 Python 3 的版本。 希望各位 Python 爱好者能参与其中，一起探索 Python 魔法背后的奥秘！ 使用 您可以直接访问 在线版，或者根据以下步骤访问本地版。 前置条件 您的系统上需要安装好 node。 使用 make 命令 若您可使用 make 命令，简单执行如下命令进行初始化： make init 执行如下命令运行服务端： make run 使用 gitbook 命令 若您不能使用 make 命令，或想直接使用 gitbook 命令，执行如下命令进行初始化： npm i -g gitbook-cli #可能需要sudo gitbook install 执行如下命令运行服务端： gitbook serve 访问 直接访问 http://localhost:4000 即可查看本书内容。 Roadmap 大体按照《Python 源码剖析》中的目录结构进行编写。依次介绍 Python 源码基本信息、内建对象和虚拟机。 [x] 章节 [x] 序章 [x] 前言 [x] Python 源代码的组织 [x] Windows 环境下编译 Python [x] UNIX/Linux 环境下编译 Python [x] 修改 Python 源码 [ ] Python 内建对象 [ ] Python 整数对象 [ ] Python List 对象 [ ] Python Dict 对象 [ ] 实现简版 Python [ ] Python 虚拟机 [ ] Python 编译结果 [ ] Python 虚拟机框架 [ ] 虚拟机一般表达式 [ ] Python 虚拟机控制流 [ ] Python 虚拟机函数机制 [ ] Python 运行环境初始化 [ ] Python 模块加载机制 [ ] Python 多线程机制 [ ] Python 内存管理机制 Copyright © Prodesire 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 12:53:54 "},"preface/code-organization.html":{"url":"preface/code-organization.html","title":"Python 源代码的组织","keywords":"","body":"Python 源代码的组织 源代码下载 方式 1：GitHub Python 源代码可以在 GitHub 上方便的获取，执行： git clone https://github.com/python/cpython.git git checkout v3.7.0 即可获取 Python 3.7.0 版本的代码。 方式 2：Python 官方网站 访问 https://www.python.org/downloads/release/python-370/ ，下拉至页面最下方，可选择下载 tarball 源码包。 亦可执行： wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz 即可获取 Python 3.7.0 版本的代码。 目录结构 进入源码目录，我们可以看到该目录下主要 包含以下文件（夹）： . ├── Doc ├── Grammar ├── Include ├── LICENSE ├── Lib ├── Mac ├── Makefile.pre.in ├── Misc ├── Modules ├── Objects ├── PC ├── PCbuild ├── Parser ├── Programs ├── Python ├── README.rst ├── Tools ├── aclocal.m4 ├── config.guess ├── config.sub ├── configure ├── configure.ac ├── install-sh ├── m4 ├── pyconfig.h.in └── setup.py 其中： Include 目录：包含了 Python 提供的所有头文件，如果用户需要自己用 C 或 C++来编写自定义模块扩展 Python，那么就需要用到这里提供的头文件。 Lib 目录：包含了 Python 自带的所有标准库，且都是用 Python 语言编写的。 Modules 目录：包含了所有用 C 语言编写的模块，比如 math、hashlib 等。它们都是那些对速度要求非常严格的模块。而相比而言，Lib 目录下则是存放一些对速度没有太严格要求的模块，比如 os。 Parser 目录：包含了 Python 解释器中的 Scanner 和 Parser 部分，即对 Python 源代码进行词法分析和语法分析的部分。除此以外，此目录还包含了一些有用的工具，这些工具能够根据 Python 语言的语法自动生成 Python 语言的词法和语法分析器，与 YACC 非常类似。 Objects 目录：包含了所有 Python 的内建对象，包括整数、list、dict 等。同时，该目录还包括了 Python 在运行时需要的所有的内部使用对象的实现。 Python 目录：包含了 Python 解释器中的 Compiler 和执行引擎部分，是 Python 运行的核心所在。 PCbuild 目录：包含了 Visual Studio 2003 的工程文件，研究 Python 源代码就从这里开始（本书将采用 Visual Studio 2017 对 Python 进行编译）。 Programs 目录：包含了 Python 二进制可执行文件的源码。 Copyright © Prodesire 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 12:53:54 "},"preface/windows-build.html":{"url":"preface/windows-build.html","title":"Windows 环境下编译 Python","keywords":"","body":"Windows 环境下编译 Python 在 Windows 环境下编译 Python 可完全通过界面操作，主要分为两个步骤： 环境准备 编译 环境准备 在 Python 3.6 及之后的版本可以使用微软的 Visual Studio 2017 进行编译，选择社区版就足够了。 在下载完成后，需要注意安装环节的选项。由于 Python 3.7 所使用的 Windows SDK 的版本为 10.0.17134.0， 所以需要选择安装该 SDK，如下图所示： 编译 进入 Python 源码根目录，打开 PCbuild\\pcbiuld.sln 解决方案，而后进行一些设置： 在左侧的解决方案目录的顶端，右键选择“属性”，以打开属性界面（如下图所示）。 由于我们只是研究 Python 的核心部分，可以选择不编译标准库和外部依赖，在“配置属性”->“配置”中仅勾选 python 和 pythoncore，然后点击“确定”（如下图所示）。 此外，默认情况下的编译设置是 Debug、32 位，您也可以根据自己的需求调整成 Release 或 64 位。 在左侧的解决方案目录中选择 python，右键选择“生成”，以进行编译： 编译结束后，生成的文件存放在PCbuild\\win32目录下（如下图所示），打开python_d即可打开新生成的 Python 3.7 解释器。 更多内容 更多关于在 Windows 上进行编译和开发 Python 的内容见官方指南 Copyright © Prodesire 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 12:53:54 "},"preface/unix-linux-build.html":{"url":"preface/unix-linux-build.html","title":"UNIX/Linux 环境下编译 Python","keywords":"","body":"UNIX/Linux 环境下编译 Python 在 UNIX/Linux 环境下编译 Python 较为简单，主要分为两个步骤： 环境准备（准备 Python 所依赖的必要环境） 编译、安装 环境准备 常规操作系统中 编译 Python 前通常需要在系统上安装以下库： gcc // 编译工具 zlib // 压缩、解压相关库 libffi // Python 所以来的用于支持 C 扩展的库 openssl // 安全套接字层密码库，Linux 中通常已具备 不同的发行版，安装方式和包名称也不尽相同。 对于 Debian/Ubuntu，执行： sudo apt install -y zlib1g zlib1g-dev libffi-dev openssl libssl-dev 对于 RedHat/CentOS/Fedora，执行： yum install -y zlib zlib-devel libffi-devel openssl openssl-devel 对于 macOS，执行： xcode-select --install 运行于 Docker 的操作系统中 Docker 版的 Linux 发行版可能会有较多的库未安装，除了安装上一小节提及的库外，其他缺失库可根据情况自行安装： bzip2 // 压缩库 readline // GNU Readline 是一个软件库，它为使用命令行界面（如 Bash）的交互式程序提供了行编辑和历史功能 sqlite // 由 C 编写的小型数据库 libuuid // 跨平台的开源的 uuid 操作库 gdbm // 小型的数据库系统 xz // 压缩解压工具 tk-devel // 图形用户界面开发工具 对于 Debian/Ubuntu，执行： sudo apt-get install bzip2 libbz2-dev sqlite3 libsqlite3-dev libreadline6 libreadline6-dev libgdbm-dev uuid-dev tk-dev 对于 RedHat/CentOS/Fedora，执行： yum install bzip2 bzip2-devel readline-devel sqlite-devel libuuid-devel gdbm-devel xz-devel tk-devel 编译、安装 进入 Python 源码根目录，执行以下命令： ./configure make make install Python 将会被编译，并安装在默认目录中。若您希望将 Python 安装在特定目录，则需要在一开始修改 configure 命令为： ./configure –-prefix= 在指定目录中: bin 目录 存放的是可执行文件 include 目录 存放的是 Python 源码的头文件 lib 目录 存放的是 Python 标准库 lib/python3.7/config-3.7m-{platform} 目录 存放的是 libpython3.7m.a，该静态库用于使用 C 语言进行扩展。{platform} 代表平台，比如在 Mac OS 上为 “darwin”，在 Linux 上为 “x86_64-linux-gnu” share 目录 存放的是帮助等文件 默认情况下，编译的 Python 是静态链接（libpython3.7m.a）。如果希望编译的 Python 是动态链接（libpython3.7m.so），则需要在一开始修改configure 命令为： ./configure --enable-shared 如需重新编译，请首先执行： make clean 再执行本节开头处的命令即可。 Copyright © Prodesire 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 12:53:54 "},"preface/modify-code.html":{"url":"preface/modify-code.html","title":"修改 Python 源码","keywords":"","body":"修改 Python 源码 在源代码中 Print 在接下来研究源码的过程中，我们可能会对某些语句的逻辑感到好奇，需要输出中间结果。 这就需要借助 Python C API 中打印对象的接口： 源文件：Objects/object.c int PyObject_Print(PyObject *op, FILE *fp, int flags) 比如，我们希望在解释器交互界面中打印整数值的时候输出一段字符串，则我们可以修改如下函数： 源文件：Objects/longobject.c static PyObject * long_to_decimal_string(PyObject *aa) { PyObject *str = PyUnicode_FromString(\"I am always before int\"); PyObject_Print(str, stdout, 0); printf(\"\\n\"); PyObject *v; if (long_to_decimal_string_internal(aa, &v, NULL, NULL, NULL) == -1) return NULL; return v; } 函数实现中的前 3 行为我们加入的代码，其中： PyUnicode_FromString 用于把 C 中的原生字符数组转换为出 Python 中的字符串（Unicode）对象 PyObject_Print 则将转换好的字符串对象打印至我们指定的标准输出（stdout） 对 Python 重新进行编译，在 Unix 上可执行： make && make bininstall 运行编译后的 Python，输入 print 语句即可看到我们希望的结果： >>> print(1) 'I am always before int' 1 Copyright © Prodesire 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-12-13 12:53:54 "}}